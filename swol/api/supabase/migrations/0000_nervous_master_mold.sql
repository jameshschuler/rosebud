-- Current sql file was generated after introspecting the database
-- If you want to run this migration please uncomment this code before executing migrations
/*
CREATE TABLE "gym_checkin" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "gym_checkin_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now(),
	"user_id" uuid NOT NULL,
	"checkin_date" timestamp with time zone NOT NULL
);
--> statement-breakpoint
ALTER TABLE "gym_checkin" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "user_profile" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "user_profile_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now(),
	"user_id" uuid NOT NULL,
	"email" varchar NOT NULL,
	"full_name" varchar,
	"avatar_url" varchar,
	"picture_url" varchar,
	"username" varchar,
	"updated_at" timestamp with time zone,
	"synced_profile" boolean DEFAULT false NOT NULL,
	CONSTRAINT "user_profile_user_id_key" UNIQUE("user_id"),
	CONSTRAINT "user_profile_email_key" UNIQUE("email")
);
--> statement-breakpoint
ALTER TABLE "user_profile" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "gym_checkin" ADD CONSTRAINT "gym_checkin_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "user_profile" ADD CONSTRAINT "user_profile_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
CREATE POLICY "Enable update for users based on user_id" ON "gym_checkin" AS PERMISSIVE FOR UPDATE TO "authenticated" USING ((auth.uid() = user_id));--> statement-breakpoint
CREATE POLICY "Enable select for users based on user_id" ON "gym_checkin" AS PERMISSIVE FOR SELECT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "gym_checkin" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable delete for users based on user_id" ON "gym_checkin" AS PERMISSIVE FOR DELETE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable update for users based on user_id" ON "user_profile" AS PERMISSIVE FOR UPDATE TO "authenticated" USING ((auth.uid() = user_id));--> statement-breakpoint
CREATE POLICY "Enable select for users based on user_id" ON "user_profile" AS PERMISSIVE FOR SELECT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Disable delete" ON "user_profile" AS PERMISSIVE FOR DELETE TO public;
*/