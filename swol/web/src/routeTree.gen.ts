/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthProfileRouteImport } from './routes/_auth.profile'
import { Route as AuthMilestonesRouteImport } from './routes/_auth.milestones'
import { Route as AuthGoalsRouteImport } from './routes/_auth.goals'
import { Route as AuthDashboardRouteImport } from './routes/_auth.dashboard'
import { Route as AuthCheckInsRouteImport } from './routes/_auth.checkIns'
import { Route as AuthAchievementsRouteImport } from './routes/_auth.achievements'

const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthProfileRoute = AuthProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthRoute,
} as any)
const AuthMilestonesRoute = AuthMilestonesRouteImport.update({
  id: '/milestones',
  path: '/milestones',
  getParentRoute: () => AuthRoute,
} as any)
const AuthGoalsRoute = AuthGoalsRouteImport.update({
  id: '/goals',
  path: '/goals',
  getParentRoute: () => AuthRoute,
} as any)
const AuthDashboardRoute = AuthDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)
const AuthCheckInsRoute = AuthCheckInsRouteImport.update({
  id: '/checkIns',
  path: '/checkIns',
  getParentRoute: () => AuthRoute,
} as any)
const AuthAchievementsRoute = AuthAchievementsRouteImport.update({
  id: '/achievements',
  path: '/achievements',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/achievements': typeof AuthAchievementsRoute
  '/checkIns': typeof AuthCheckInsRoute
  '/dashboard': typeof AuthDashboardRoute
  '/goals': typeof AuthGoalsRoute
  '/milestones': typeof AuthMilestonesRoute
  '/profile': typeof AuthProfileRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/achievements': typeof AuthAchievementsRoute
  '/checkIns': typeof AuthCheckInsRoute
  '/dashboard': typeof AuthDashboardRoute
  '/goals': typeof AuthGoalsRoute
  '/milestones': typeof AuthMilestonesRoute
  '/profile': typeof AuthProfileRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_auth/achievements': typeof AuthAchievementsRoute
  '/_auth/checkIns': typeof AuthCheckInsRoute
  '/_auth/dashboard': typeof AuthDashboardRoute
  '/_auth/goals': typeof AuthGoalsRoute
  '/_auth/milestones': typeof AuthMilestonesRoute
  '/_auth/profile': typeof AuthProfileRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/achievements'
    | '/checkIns'
    | '/dashboard'
    | '/goals'
    | '/milestones'
    | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/achievements'
    | '/checkIns'
    | '/dashboard'
    | '/goals'
    | '/milestones'
    | '/profile'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_auth/achievements'
    | '/_auth/checkIns'
    | '/_auth/dashboard'
    | '/_auth/goals'
    | '/_auth/milestones'
    | '/_auth/profile'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/profile': {
      id: '/_auth/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthProfileRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/milestones': {
      id: '/_auth/milestones'
      path: '/milestones'
      fullPath: '/milestones'
      preLoaderRoute: typeof AuthMilestonesRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/goals': {
      id: '/_auth/goals'
      path: '/goals'
      fullPath: '/goals'
      preLoaderRoute: typeof AuthGoalsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/checkIns': {
      id: '/_auth/checkIns'
      path: '/checkIns'
      fullPath: '/checkIns'
      preLoaderRoute: typeof AuthCheckInsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/achievements': {
      id: '/_auth/achievements'
      path: '/achievements'
      fullPath: '/achievements'
      preLoaderRoute: typeof AuthAchievementsRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthAchievementsRoute: typeof AuthAchievementsRoute
  AuthCheckInsRoute: typeof AuthCheckInsRoute
  AuthDashboardRoute: typeof AuthDashboardRoute
  AuthGoalsRoute: typeof AuthGoalsRoute
  AuthMilestonesRoute: typeof AuthMilestonesRoute
  AuthProfileRoute: typeof AuthProfileRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAchievementsRoute: AuthAchievementsRoute,
  AuthCheckInsRoute: AuthCheckInsRoute,
  AuthDashboardRoute: AuthDashboardRoute,
  AuthGoalsRoute: AuthGoalsRoute,
  AuthMilestonesRoute: AuthMilestonesRoute,
  AuthProfileRoute: AuthProfileRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
